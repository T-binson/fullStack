const http = require('http');
const assert = require('assert');
const Event = require('events').EventEmitter;

module.exports = class {
	constructor() {
		this._ev = new Event();
		this._queue = [];
		this._server = http.createServer((req, res) => {
			if (this._queue.length > 0) {
				const ctx = {
					req,
					res,
					resquest: {},
					response: {
						body: ''
					}
				};
				const _this = this;
				_run(0);
				async function _run(n, cb) {
					let fn = _this._queue[n];
					let str = fn.constructor.toString();
					if (str.indexOf('GeneratorFunction') !== -1) {
						console.log('generator');
					} else if (str.indexOf('AsyncFunction') !== -1) {
						await fn(ctx, () => {
							return new Promise((resolve, reject) => {
								_run(n+1, () => {
									resolve();
								});
							});
						});
					} else if (str.indexOf('Function')) {
						fn(ctx, () => {
							_run(n+1);
						});
					}
					cb && cb();
				}
			} else {
				res.writeHeader(404);
				res.write('Not found');
				res.end();
			}
		});
	}
	listen(port=80) {
		this._server.listen(port);
	}
	use(fn) {
		// assert(fn, 'fn is required');
		let str = fn.constructor.toString();
		if (str.indexOf('GeneratorFunction') !== -1) {
			console.warn('generator has been abandoned in koa');
		}

		this._queue.push(fn);
	}
}